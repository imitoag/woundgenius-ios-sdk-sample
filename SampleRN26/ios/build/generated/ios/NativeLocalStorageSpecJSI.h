/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeLocalStorageCxxSpecJSI : public TurboModule {
protected:
  NativeLocalStorageCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual void setItem(jsi::Runtime &rt, jsi::String value, jsi::String key) = 0;
  virtual std::optional<jsi::String> getItem(jsi::Runtime &rt, jsi::String key) = 0;
  virtual void removeItem(jsi::Runtime &rt, jsi::String key) = 0;
  virtual void clear(jsi::Runtime &rt) = 0;
  virtual jsi::Value startCapturing(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeLocalStorageCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "NativeLocalStorage";

protected:
  NativeLocalStorageCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeLocalStorageCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeLocalStorageCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeLocalStorageCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    void setItem(jsi::Runtime &rt, jsi::String value, jsi::String key) override {
      static_assert(
          bridging::getParameterCount(&T::setItem) == 3,
          "Expected setItem(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setItem, jsInvoker_, instance_, std::move(value), std::move(key));
    }
    std::optional<jsi::String> getItem(jsi::Runtime &rt, jsi::String key) override {
      static_assert(
          bridging::getParameterCount(&T::getItem) == 2,
          "Expected getItem(...) to have 2 parameters");

      return bridging::callFromJs<std::optional<jsi::String>>(
          rt, &T::getItem, jsInvoker_, instance_, std::move(key));
    }
    void removeItem(jsi::Runtime &rt, jsi::String key) override {
      static_assert(
          bridging::getParameterCount(&T::removeItem) == 2,
          "Expected removeItem(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::removeItem, jsInvoker_, instance_, std::move(key));
    }
    void clear(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::clear) == 1,
          "Expected clear(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::clear, jsInvoker_, instance_);
    }
    jsi::Value startCapturing(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::startCapturing) == 1,
          "Expected startCapturing(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::startCapturing, jsInvoker_, instance_);
    }

  private:
    friend class NativeLocalStorageCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
